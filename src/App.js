import React, { useState, createContext, useContext, useEffect, useMemo, useCallback } from 'react';
import { Home, User, FileText, BarChart2, DollarSign, Archive, Users, UserCheck, Flag, LogOut, Bell, MoreVertical, ShieldCheck, Edit, Trash2, Loader2, PlusCircle, Search, XCircle, CheckCircle, Image as ImageIcon } from 'lucide-react';

// --- MOCK DATABASE & CONTEXT ---
const DatabaseContext = createContext(null);

const initialDb = {
    plans: [ { id: '1', name: '1 month', validity: '1', amount: 800 }, { id: '2', name: '3 months', validity: '3', amount: 2200 }, { id: '3', name: 'Annual', validity: '12', amount: 8500 }],
    coaches: [ { id: '1', name: 'Juan Dela Cruz', email: 'juan@stamina.fit', contact: '09123456789', expiration: '2025-02-11', photoURL: 'https://placehold.co/100x100/A3BFFA/333333?text=JC' }],
    inventory: [ { id: '1', name: 'Treadmill', total: 1, status: 'Active' }, { id: '2', name: '10 lbs Dumbell', total: 3, status: 'Inactive' }],
    members: [ { id: '1', name: 'James Medalla', email: 'james@email.com', contact: '09987654321', dateEnrolled: '2025-01-11', planId: '1', planName: '1 month', memberId: 'SFM-MEMBER-1', photoURL: 'https://placehold.co/100x100/F0E7F6/333333?text=JM' }],
    payments: [{ id: '1', memberId: '1', memberName: 'James Medalla', planId: '1', planName: '1 month', amount: 800, datePaid: '2025-01-11' }]
};

const DatabaseProvider = ({ children }) => {
    const [db, setDb] = useState(initialDb);
    const getCollection = (collectionName) => db[collectionName] || [];
    const addItem = (collectionName, item) => { setDb(prevDb => ({ ...prevDb, [collectionName]: [...prevDb[collectionName], { ...item, id: new Date().getTime().toString() }] })); };
    const updateItem = (collectionName, id, updatedItem) => { setDb(prevDb => ({ ...prevDb, [collectionName]: prevDb[collectionName].map(item => item.id === id ? { ...item, ...updatedItem } : item) })); };
    const deleteItem = (collectionName, id) => { setDb(prevDb => ({ ...prevDb, [collectionName]: prevDb[collectionName].filter(item => item.id !== id) })); };
    const value = { getCollection, addItem, updateItem, deleteItem };
    return <DatabaseContext.Provider value={value}>{children}</DatabaseContext.Provider>;
};
const useDatabase = () => useContext(DatabaseContext);

// --- TOAST NOTIFICATION ---
const ToastContext = createContext(null);
const ToastProvider = ({ children }) => {
    const [toast, setToast] = useState(null);
    const showToast = useCallback((message, type = 'success') => { setToast({ message, type }); setTimeout(() => setToast(null), 5000); }, []);
    return ( <ToastContext.Provider value={{ showToast }}> {children} {toast && (<div className={`fixed bottom-5 right-5 p-4 rounded-lg shadow-lg text-white flex items-center z-50 ${toast.type === 'success' ? 'bg-green-500' : 'bg-red-500'}`}><_ToastIcon type={toast.type} />{toast.message}</div>)} </ToastContext.Provider> );
};
const _ToastIcon = ({type}) => type === 'success' ? <CheckCircle className="mr-3" /> : <XCircle className="mr-3" />;
const useToast = () => useContext(ToastContext);

// --- SIMULATED AUTHENTICATION CONTEXT ---
const AuthContext = createContext(null);
const AuthProvider = ({ children }) => {
    const [user, setUser] = useState(null);
    const login = (email, password) => {
        if ((email.toLowerCase() === 'admin@stamina.fit' && password === 'password') || (email.toLowerCase() === 'coach@stamina.fit' && password === 'password123')) {
            const role = email.toLowerCase() === 'admin@stamina.fit' ? 'admin' : 'coach';
            const photoURL = role === 'admin' ? 'https://placehold.co/100x100/667EEA/FFFFFF?text=A' : 'https://placehold.co/100x100/4FD1C5/FFFFFF?text=C';
            setUser({ email, role, photoURL });
            return true;
        }
        return false;
    };
    const logout = () => setUser(null);
    const value = { user, login, logout, isAuthenticated: !!user };
    return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};
const useAuth = () => useContext(AuthContext);

// --- LOGIN PAGE ---
const LoginPage = () => {
    const [email, setEmail] = useState('admin@stamina.fit');
    const [password, setPassword] = useState('password');
    const [error, setError] = useState('');
    const { login } = useAuth();
    const { showToast } = useToast();
    const handleLogin = (e) => { e.preventDefault(); setError(''); if (login(email, password)) { showToast('Login successful!'); } else { setError('Login failed. Please check credentials.'); showToast('Login failed', 'error'); } };
    return ( <div className="bg-gray-200 min-h-screen flex items-center justify-center p-4 font-sans"> <Card className="w-full max-w-md shadow-2xl"> <div className="text-center mb-8"><h1 className="text-3xl font-bold text-slate-800">Stamina Fitness Login</h1></div> <form onSubmit={handleLogin}> <div className="space-y-4"> <Input placeholder="Email" type="email" value={email} onChange={(e) => setEmail(e.target.value)} /> <Input placeholder="Password" type="password" value={password} onChange={(e) => setPassword(e.target.value)} /> </div> <div className="text-xs text-gray-500 mt-4 space-y-1 bg-gray-100 p-2 rounded-md"> <p><strong>Admin:</strong> admin@stamina.fit / password</p> <p><strong>Coach:</strong> coach@stamina.fit / password123</p> </div> {error && <p className="text-red-500 text-sm mt-4 text-center">{error}</p>} <div className="mt-6"> <Button type="submit" className="w-full">Login</Button> </div> </form> </Card> </div> );
};

// --- REUSABLE COMPONENTS ---
const Card = ({ children, className = '' }) => <div className={`bg-white p-6 rounded-2xl shadow-sm ${className}`}>{children}</div>;
const Button = ({ children, className = '', variant = 'primary', ...props }) => { const variants = { primary: 'bg-indigo-600 text-white hover:bg-indigo-700', secondary: 'bg-gray-200 text-gray-800 hover:bg-gray-300', danger: 'bg-red-500 text-white hover:bg-red-600', warning: 'bg-yellow-500 text-white hover:bg-yellow-600' }; return <button className={`px-6 py-2 rounded-lg font-semibold transition-colors duration-200 disabled:opacity-50 flex items-center justify-center ${variants[variant]} ${className}`} {...props}>{children}</button>; };
const Input = ({ label, type = 'text', ...props }) => (<div>{label && <label className="block text-sm font-medium text-gray-700 mb-1">{label}</label>}<input type={type} {...props} className="w-full p-3 bg-gray-100 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500" /></div>);
const SearchInput = ({ value, onChange, placeholder="Search..." }) => (<div className="relative"><Input type="text" placeholder={placeholder} value={value} onChange={onChange} className="pl-10"/><Search className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400" size={20}/></div>);
const Select = ({ label, children, ...props }) => (<div>{label && <label className="block text-sm font-medium text-gray-700 mb-1">{label}</label>}<select {...props} className="w-full p-3 bg-gray-100 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500">{children}</select></div>);
const Table = ({ headers, children, loading }) => (<div className="overflow-x-auto"><table className="w-full text-left mt-4"><thead><tr className="bg-gray-50">{headers.map((h) => <th key={h} className="p-3 text-sm font-semibold text-gray-600 uppercase">{h}</th>)}</tr></thead><tbody>{loading ? (<tr><td colSpan={headers.length} className="text-center p-8"><Loader2 className="mx-auto h-8 w-8 animate-spin text-indigo-600" /></td></tr>) : (children.length > 0 ? children : <tr><td colSpan={headers.length} className="text-center p-8 text-gray-500">No data found.</td></tr>) }</tbody></table></div>);
const Modal = ({ isOpen, onClose, title, children }) => { if (!isOpen) return null; return <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4"><div className="bg-white rounded-2xl shadow-xl w-full max-w-lg"><div className="p-6 border-b flex justify-between items-center"><h2 className="text-xl font-bold text-slate-800">{title}</h2><Button variant="secondary" onClick={onClose} className="px-2 py-1 text-sm">X</Button></div><div className="p-6">{children}</div></div></div>; };
const Avatar = ({ src, alt, text }) => <div className="w-10 h-10 bg-gray-200 rounded-full flex-shrink-0 overflow-hidden"><img src={src} alt={alt} className="w-full h-full object-cover" onError={(e) => { e.target.onerror = null; e.target.src=`https://placehold.co/100x100/A3BFFA/333333?text=${text}`}}/></div>;

// --- FULL PAGE COMPONENTS ---
const Dashboard = () => {
    const { getCollection } = useDatabase();
    const members = getCollection('members');
    const coaches = getCollection('coaches');
    const payments = getCollection('payments');
    const totalSales = useMemo(() => payments.reduce((sum, p) => sum + p.amount, 0), [payments]);
    const SalesChart = () => { const percentage = totalSales > 0 ? (totalSales % 5000) / 50 : 84; const circumference = 2 * Math.PI * 45; const strokeDashoffset = circumference - (percentage / 100) * circumference; return (<div className="relative w-40 h-40"><svg className="w-full h-full" viewBox="0 0 100 100"><circle className="text-gray-200" strokeWidth="10" stroke="currentColor" fill="transparent" r="45" cx="50" cy="50" /><circle className="text-indigo-600" strokeWidth="10" strokeDasharray={circumference} strokeDashoffset={strokeDashoffset} strokeLinecap="round" stroke="currentColor" fill="transparent" r="45" cx="50" cy="50" transform="rotate(-90 50 50)"/></svg><div className="absolute inset-0 flex items-center justify-center"><span className="text-3xl font-bold text-slate-800">{Math.round(percentage)}%</span></div></div>); };
    return (<div className="grid grid-cols-1 lg:grid-cols-3 gap-8"><Card className="lg:col-span-3 flex justify-between items-center"><h2 className="text-2xl font-bold text-slate-800">Welcome Banner, Admin!</h2></Card><Card><h3 className="font-bold text-slate-800 mb-4">Coaches</h3><ul className="space-y-2">{coaches.slice(0,3).map(c => <li key={c.id} className="flex items-center"><Avatar src={c.photoURL} alt={c.name} text={c.name.charAt(0)}/><span className="ml-3 font-semibold">{c.name}</span></li>)}</ul></Card><Card className="flex flex-col items-center"><h3 className="font-bold text-slate-800 self-start">Sales</h3><div className="mt-2"><SalesChart /></div></Card><Card><h3 className="font-bold text-slate-800">Total Revenue</h3><p className="text-4xl font-bold text-green-600 mt-4">${totalSales.toFixed(2)}</p></Card><Card className="lg:col-span-3"><h3 className="font-bold text-slate-800">Active Members</h3><Table headers={['Name', 'Plan', 'Join Date']}>{members.slice(0, 4).map(m => (<tr key={m.id} className="border-b"><td className="p-3 flex items-center"><Avatar src={m.photoURL} alt={m.name} text={m.name.charAt(0)}/><span className="ml-3 font-semibold">{m.name}</span></td><td className="p-3">{m.planName}</td><td className="p-3">{m.dateEnrolled}</td></tr>))}</Table></Card></div>);
};
const AdminProfile = () => {
    const { user } = useAuth();
    const { showToast } = useToast();
    const [displayName, setDisplayName] = useState('Admin');
    const [contact, setContact] = useState('09123456789');
    return (<div><h1 className="text-3xl font-bold text-slate-800 mb-8">Admin Information</h1><div className="grid grid-cols-1 md:grid-cols-2 gap-8"><Card><form className="space-y-4"><h3 className="text-xl font-bold">Update Details</h3><Input label="Username" value={displayName} onChange={e => setDisplayName(e.target.value)} /><Input label="Contact No." value={contact} onChange={e => setContact(e.target.value)} /><Input label="Email Address" type="email" value={user.email} disabled /><div className="flex justify-end"><Button type="button" onClick={() => showToast('Profile updated (simulation).')}>Save Changes</Button></div></form></Card><Card><form className="space-y-4"><h3 className="text-xl font-bold">Change Password</h3><Input label="Current Password" type="password" /><Input label="New Password" type="password" /><Input label="Re-type Password" type="password" /><div className="flex justify-end"><Button type="button" onClick={() => showToast('Password changed (simulation).')}>Change</Button></div></form></Card></div></div>);
};
const Registration = () => {
    const { getCollection, addItem } = useDatabase();
    const plans = getCollection('plans');
    const { showToast } = useToast();
    const [formData, setFormData] = useState({ name: '', email: '', contact: '', dateEnrolled: new Date().toISOString().split('T')[0], planId: '' });
    const handleSave = (e) => { e.preventDefault(); const selectedPlan = plans.find(p => p.id === formData.planId); const memberData = { ...formData, memberId: `SFM-MEMBER-${new Date().getTime()}`, planName: selectedPlan?.name || 'N/A' }; addItem('members', memberData); showToast('Member Registered Successfully!'); setFormData({ name: '', email: '', contact: '', dateEnrolled: new Date().toISOString().split('T')[0], planId: '' }); };
    return (<div><h1 className="text-3xl font-bold text-slate-800 mb-2">Register</h1><p className="text-yellow-600 font-semibold text-lg mb-8">Become a Member!</p><Card><form onSubmit={handleSave} className="space-y-6"><div className="grid grid-cols-1 md:grid-cols-2 gap-6"><Input label="Name of Participant" value={formData.name} onChange={e=>setFormData({...formData, name: e.target.value})} required /><Input label="Date of Join" type="date" value={formData.dateEnrolled} onChange={e=>setFormData({...formData, dateEnrolled: e.target.value})} /><Input label="Email Address" type="email" value={formData.email} onChange={e=>setFormData({...formData, email: e.target.value})} required /><Input label="Contact No." value={formData.contact} onChange={e=>setFormData({...formData, contact: e.target.value})} /><Select label="Plan" value={formData.planId} onChange={e=>setFormData({...formData, planId: e.target.value})} required><option value="" disabled>Select a plan</option>{plans.map(p => <option key={p.id} value={p.id}>{p.name} (${p.amount})</option>)}</Select><Input label="Price" value={plans.find(p=>p.id===formData.planId)?.amount || ''} disabled /></div><div className="flex justify-end space-x-4"><Button variant="secondary" type="button">Cancel</Button><Button type="submit">Avail Membership</Button></div></form></Card></div>);
};
const Plan = () => { const { getCollection, addItem, updateItem, deleteItem } = useDatabase(); const plans = getCollection('plans'); const [isModalOpen, setIsModalOpen] = useState(false); const [currentPlan, setCurrentPlan] = useState(null); const [formData, setFormData] = useState({ name: '', validity: '', amount: '' }); const [searchTerm, setSearchTerm] = useState(''); const filteredPlans = useMemo(() => plans.filter(p => p.name.toLowerCase().includes(searchTerm.toLowerCase())), [plans, searchTerm]); const handleOpenModal = (plan = null) => { setCurrentPlan(plan); setFormData(plan || { name: '', validity: '', amount: '' }); setIsModalOpen(true); }; const handleSave = (e) => { e.preventDefault(); const planData = { name: formData.name, validity: Number(formData.validity), amount: Number(formData.amount) }; if (currentPlan) { updateItem('plans', currentPlan.id, planData); } else { addItem('plans', planData); } setIsModalOpen(false); }; return (<div><div className="flex justify-between items-center mb-8"><h1 className="text-3xl font-bold text-slate-800">Manage Plans</h1><Button onClick={() => handleOpenModal()}><PlusCircle className="mr-2 h-4 w-4" /> Add Plan</Button></div><Card><div className="flex justify-end mb-4"><SearchInput value={searchTerm} onChange={e => setSearchTerm(e.target.value)} /></div><Table headers={['Plan Name', 'Validity (Months)', 'Amount ($)', 'Actions']}>{filteredPlans.map(p => (<tr key={p.id} className="border-b"><td className="p-3">{p.name}</td><td className="p-3">{p.validity}</td><td className="p-3">{p.amount}</td><td className="p-3 flex space-x-2"><Button variant="secondary" className="px-2 py-1" onClick={() => handleOpenModal(p)}><Edit size={16} /></Button><Button variant="danger" className="px-2 py-1" onClick={() => deleteItem('plans', p.id)}><Trash2 size={16} /></Button></td></tr>))}</Table></Card><Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)} title={currentPlan ? "Edit Plan" : "Add Plan"}><form onSubmit={handleSave} className="space-y-4"><Input label="Plan Name" value={formData.name} onChange={(e) => setFormData({...formData, name: e.target.value})} /><Input label="Validity (Months)" type="number" value={formData.validity} onChange={(e) => setFormData({...formData, validity: e.target.value})} /><Input label="Amount ($)" type="number" value={formData.amount} onChange={(e) => setFormData({...formData, amount: e.target.value})} /><div className="flex justify-end space-x-4 pt-4"><Button variant="secondary" type="button" onClick={() => setIsModalOpen(false)}>Cancel</Button><Button type="submit">Save</Button></div></form></Modal></div>); };
const Coaches = () => { const { getCollection, addItem, updateItem, deleteItem } = useDatabase(); const coaches = getCollection('coaches'); const { showToast } = useToast(); const [isModalOpen, setIsModalOpen] = useState(false); const [currentCoach, setCurrentCoach] = useState(null); const [formData, setFormData] = useState({ name: '', email: '', contact: '', expiration: '', photoURL: '' }); const handleOpenModal = (coach = null) => { setCurrentCoach(coach); setFormData(coach || { name: '', email: '', contact: '', expiration: '', photoURL: '' }); setIsModalOpen(true); }; const handleSave = (e) => { e.preventDefault(); if (currentCoach) { updateItem('coaches', currentCoach.id, formData); showToast('Coach updated successfully!'); } else { addItem('coaches', { ...formData, coachId: `SFM${new Date().getTime()}` }); showToast('Coach added!'); } setIsModalOpen(false); }; return (<div><div className="flex justify-between items-center mb-8"><h1 className="text-3xl font-bold text-slate-800">Manage Coaches</h1><Button onClick={() => handleOpenModal()}><PlusCircle className="mr-2 h-4 w-4" /> Add Coach</Button></div><Card><Table headers={['Coach', 'Email', 'Contact', 'Actions']}>{coaches.map(c => (<tr key={c.id} className="border-b"><td className="p-3 flex items-center"><Avatar src={c.photoURL} alt={c.name} text={c.name.charAt(0)}/><span className="ml-4 font-semibold">{c.name}</span></td><td className="p-3">{c.email}</td><td className="p-3">{c.contact}</td><td className="p-3 flex space-x-2"><Button variant="secondary" className="px-2 py-1" onClick={() => handleOpenModal(c)}><Edit size={16} /></Button><Button variant="danger" className="px-2 py-1" onClick={() => deleteItem('coaches', c.id)}><Trash2 size={16} /></Button></td></tr>))}</Table></Card><Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)} title={currentCoach ? "Edit Coach" : "Add Coach"}><form onSubmit={handleSave} className="space-y-4"><Input label="Coach Name" value={formData.name} onChange={(e) => setFormData({...formData, name: e.target.value})} required/><Input label="Email" type="email" value={formData.email} onChange={(e) => setFormData({...formData, email: e.target.value})} required /><Input label="Contact" type="tel" value={formData.contact} onChange={(e) => setFormData({...formData, contact: e.target.value})} /><Input label="Date Expiration" type="date" value={formData.expiration} onChange={(e) => setFormData({...formData, expiration: e.target.value})} /><Input label="Photo URL" type="text" value={formData.photoURL} onChange={(e) => setFormData({...formData, photoURL: e.target.value})} /><div className="flex justify-end space-x-4 pt-4"><Button variant="secondary" type="button" onClick={() => setIsModalOpen(false)}>Cancel</Button><Button type="submit">Save</Button></div></form></Modal></div>); };
const Inventory = () => { const { getCollection, addItem, updateItem, deleteItem } = useDatabase(); const inventory = getCollection('inventory'); const [isModalOpen, setIsModalOpen] = useState(false); const [currentItem, setCurrentItem] = useState(null); const [formData, setFormData] = useState({ name: '', total: '', status: 'Active' }); const [searchTerm, setSearchTerm] = useState(''); const filteredInventory = useMemo(() => inventory.filter(i => i.name.toLowerCase().includes(searchTerm.toLowerCase())), [inventory, searchTerm]); const handleOpenModal = (item = null) => { setCurrentItem(item); setFormData(item || { name: '', total: '', status: 'Active' }); setIsModalOpen(true); }; const handleSave = (e) => { e.preventDefault(); const itemData = { name: formData.name, total: Number(formData.total), status: formData.status }; if (currentItem) { updateItem('inventory', currentItem.id, itemData); } else { addItem('inventory', itemData); } setIsModalOpen(false); }; return (<div><div className="flex justify-between items-center mb-8"><h1 className="text-3xl font-bold text-slate-800">Manage Inventory</h1><Button onClick={() => handleOpenModal()}><PlusCircle className="mr-2 h-4 w-4" /> Add Equipment</Button></div><Card><div className="flex justify-end mb-4"><SearchInput value={searchTerm} onChange={e => setSearchTerm(e.target.value)} /></div><Table headers={['Equipment Name', 'Total No.', 'Status', 'Actions']}>{filteredInventory.map(item => (<tr key={item.id} className="border-b"><td className="p-3">{item.name}</td><td className="p-3">{item.total}</td><td className="p-3"><span className={`px-3 py-1 rounded-full text-xs font-semibold ${item.status === 'Active' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>{item.status}</span></td><td className="p-3 flex space-x-2"><Button variant="secondary" className="px-2 py-1" onClick={() => handleOpenModal(item)}><Edit size={16} /></Button><Button variant="danger" className="px-2 py-1" onClick={() => deleteItem('inventory', item.id)}><Trash2 size={16} /></Button></td></tr>))}</Table></Card><Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)} title={currentItem ? "Edit Equipment" : "Add Equipment"}><form onSubmit={handleSave} className="space-y-4"><Input label="Equipment Name" value={formData.name} onChange={(e) => setFormData({...formData, name: e.target.value})} /><Input label="Total No." type="number" value={formData.total} onChange={(e) => setFormData({...formData, total: e.target.value})} /><Select label="Status" value={formData.status} onChange={(e) => setFormData({...formData, status: e.target.value})}><option value="Active">Active</option><option value="Inactive">Inactive</option><option value="Maintenance">Maintenance</option></Select><div className="flex justify-end space-x-4 pt-4"><Button variant="secondary" type="button" onClick={() => setIsModalOpen(false)}>Cancel</Button><Button type="submit">Save Changes</Button></div></form></Modal></div>); };
const ViewMembers = () => { const { getCollection, addItem, updateItem, deleteItem } = useDatabase(); const members = getCollection('members'); const plans = getCollection('plans'); const [isModalOpen, setIsModalOpen] = useState(false); const [currentMember, setCurrentMember] = useState(null); const [formData, setFormData] = useState({ name: '', email: '', contact: '', dateEnrolled: '', planId: '', photoURL: '' }); const [searchTerm, setSearchTerm] = useState(''); const filteredMembers = useMemo(() => members.filter(m => m.name.toLowerCase().includes(searchTerm.toLowerCase()) || m.memberId.toLowerCase().includes(searchTerm.toLowerCase())), [members, searchTerm]); const handleOpenModal = (member = null) => { setCurrentMember(member); setFormData(member || { name: '', email: '', contact: '', dateEnrolled: new Date().toISOString().split('T')[0], planId: '', photoURL: '' }); setIsModalOpen(true); }; const handleSave = (e) => { e.preventDefault(); const selectedPlan = plans.find(p => p.id === formData.planId); const memberData = { ...formData, memberId: currentMember ? currentMember.memberId : `SFM-MEMBER-${new Date().getTime()}`, planName: selectedPlan?.name || 'N/A' }; if (currentMember) { updateItem('members', currentMember.id, memberData); } else { addItem('members', memberData); } setIsModalOpen(false); }; return (<div><div className="flex justify-between items-center mb-8"><h1 className="text-3xl font-bold text-slate-800">Manage Members</h1><Button onClick={() => handleOpenModal()}><PlusCircle className="mr-2 h-4 w-4" /> Add Member</Button></div><Card><div className="flex justify-end mb-4"><SearchInput value={searchTerm} onChange={e => setSearchTerm(e.target.value)} /></div><Table headers={['Member', 'Member ID', 'Plan', 'Date Enrolled', 'Contact', 'Actions']}>{filteredMembers.map(m => (<tr key={m.id} className="border-b"><td className="p-3 flex items-center"><Avatar src={m.photoURL} alt={m.name} text={m.name.charAt(0)}/><span className="ml-4 font-semibold">{m.name}</span></td><td className="p-3">{m.memberId}</td><td className="p-3">{m.planName}</td><td className="p-3">{m.dateEnrolled}</td><td className="p-3">{m.contact}</td><td className="p-3 flex space-x-2"><Button variant="secondary" className="px-2 py-1" onClick={() => handleOpenModal(m)}><Edit size={16} /></Button><Button variant="danger" className="px-2 py-1" onClick={() => deleteItem('members', m.id)}><Trash2 size={16} /></Button></td></tr>))}</Table></Card><Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)} title={currentMember ? "Edit Member" : "Register New Member"}><form onSubmit={handleSave} className="space-y-4"><Input label="Member Name" value={formData.name} onChange={(e) => setFormData({...formData, name: e.target.value})} required/><Input label="Email" type="email" value={formData.email} onChange={(e) => setFormData({...formData, email: e.target.value})} required/><Input label="Contact No." type="tel" value={formData.contact} onChange={(e) => setFormData({...formData, contact: e.target.value})} /><Input label="Date of Join" type="date" value={formData.dateEnrolled} onChange={(e) => setFormData({...formData, dateEnrolled: e.target.value})} /><Input label="Photo URL" type="text" value={formData.photoURL} onChange={(e) => setFormData({...formData, photoURL: e.target.value})} /><Select label="Plan" value={formData.planId} onChange={(e) => setFormData({...formData, planId: e.target.value})} required><option value="" disabled>Select a plan</option>{plans.map(p => <option key={p.id} value={p.id}>{p.name} (${p.amount})</option>)}</Select><div className="flex justify-end space-x-4 pt-4"><Button variant="secondary" type="button" onClick={() => setIsModalOpen(false)}>Cancel</Button><Button type="submit">Save Member</Button></div></form></Modal></div>); };
const Payment = () => { const { getCollection, addItem } = useDatabase(); const members = getCollection('members'); const plans = getCollection('plans'); const { showToast } = useToast(); const [selectedMember, setSelectedMember] = useState(''); const [selectedPlan, setSelectedPlan] = useState(''); const [price, setPrice] = useState(''); const [dateOfJoin, setDateOfJoin] = useState(new Date().toISOString().split('T')[0]); const [isSubmitting, setIsSubmitting] = useState(false); useEffect(() => { const plan = plans.find(p => p.id === selectedPlan); if (plan) { setPrice(plan.amount); } else { setPrice(''); } }, [selectedPlan, plans]); const handleSave = (e) => { e.preventDefault(); setIsSubmitting(true); const member = members.find(m => m.id === selectedMember); const plan = plans.find(p => p.id === selectedPlan); if(!member || !plan) { showToast("Please select a valid member and plan.", "error"); setIsSubmitting(false); return; } addItem('payments', { memberId: selectedMember, memberName: member.name, planId: selectedPlan, planName: plan.name, amount: plan.amount, datePaid: dateOfJoin }); showToast("Payment saved successfully!"); setSelectedMember(''); setSelectedPlan(''); setIsSubmitting(false); }; return (<div><h1 className="text-3xl font-bold text-slate-800 mb-2">Point of Sale</h1><p className="text-yellow-600 font-semibold text-lg mb-8">Add Payment</p><Card><form onSubmit={handleSave} className="space-y-6"><div className="grid grid-cols-1 md:grid-cols-3 gap-6"><Select label="Name of Member" value={selectedMember} onChange={(e) => setSelectedMember(e.target.value)} required><option value="" disabled>Select Member</option>{members.map(m => <option key={m.id} value={m.id}>{m.name}</option>)}</Select><Select label="Plan" value={selectedPlan} onChange={(e) => setSelectedPlan(e.target.value)} required><option value="" disabled>Select Plan</option>{plans.map(p => <option key={p.id} value={p.id}>{p.name}</option>)}</Select><Input label="Price" value={price ? `$${price}`: ''} disabled /></div><Input label="Date of Join" type="date" value={dateOfJoin} onChange={e => setDateOfJoin(e.target.value)} /><div className="flex justify-end space-x-4 pt-4"><Button variant="secondary" type="button">Cancel</Button><Button type="submit" disabled={isSubmitting}>{isSubmitting && <Loader2 className="mr-2 h-4 w-4 animate-spin"/>}Save Payment</Button></div></form></Card></div>); };
const Report = () => { const { getCollection } = useDatabase(); const payments = getCollection('payments'); const [fromDate, setFromDate] = useState(''); const [toDate, setToDate] = useState(''); const filteredPayments = useMemo(() => { return payments.filter(p => { const paymentDate = new Date(p.datePaid); const start = fromDate ? new Date(fromDate) : null; const end = toDate ? new Date(toDate) : null; if (start && paymentDate < start) return false; if (end && paymentDate > end) return false; return true; }); }, [payments, fromDate, toDate]); const totalSales = useMemo(() => filteredPayments.reduce((acc, p) => acc + p.amount, 0), [filteredPayments]); return (<div><h1 className="text-3xl font-bold text-slate-800 mb-8">Sales Report</h1><Card className="mb-8"><div className="grid grid-cols-1 md:grid-cols-3 gap-6 items-end"><Input label="From Date" type="date" value={fromDate} onChange={e => setFromDate(e.target.value)} /><Input label="To Date" type="date" value={toDate} onChange={e => setToDate(e.target.value)} /><Input label="Total Revenue" type="text" value={`$${totalSales.toFixed(2)}`} disabled /></div></Card><Card><div className="flex justify-between items-center mb-4"><h2 className="text-xl font-bold">Payment History</h2></div><Table headers={['Member Name', 'Plan', 'Date Paid', 'Amount']}>{filteredPayments.map(p => (<tr key={p.id} className="border-b"><td className="p-3">{p.memberName}</td><td className="p-3">{p.planName}</td><td className="p-3">{p.datePaid}</td><td className="p-3">${p.amount}</td></tr>))}</Table></Card></div>); };
const CoachDashboard = () => <Card><h1 className="text-2xl font-bold">Welcome, Coach!</h1><p className="mt-2">Here you can manage your assigned members and view your schedule.</p></Card>;

// --- DASHBOARD LAYOUT ---
const DashboardApp = () => {
    const { logout, user } = useAuth();
    const [activePage, setActivePage] = useState('dashboard');
    const adminNavItems = [ { id: 'dashboard', icon: Home, label: 'Dashboard' }, { id: 'adminProfile', icon: User, label: 'Admin Profile' }, { id: 'registration', icon: FileText, label: 'Registration' }, { id: 'plan', icon: BarChart2, label: 'Plan' }, { id: 'payment', icon: DollarSign, label: 'Payment' }, { id: 'inventory', icon: Archive, label: 'Inventory' }, { id: 'viewMembers', icon: Users, label: 'View Members' }, { id: 'coaches', icon: UserCheck, label: 'Coaches' }, { id: 'report', icon: Flag, label: 'Report' }];
    const coachNavItems = [{id: 'dashboard', icon: Home, label: 'Dashboard'}, {id: 'viewMembers', icon: Users, label: 'My Members'}];
    const navItemsList = user?.role === 'admin' ? adminNavItems : coachNavItems;
    const renderPage = () => { if(user?.role === 'coach') { switch(activePage) { case 'dashboard': return <CoachDashboard />; case 'viewMembers': return <ViewMembers />; default: return <CoachDashboard/>; } } switch (activePage) { case 'dashboard': return <Dashboard />; case 'adminProfile': return <AdminProfile />; case 'registration': return <Registration />; case 'plan': return <Plan />; case 'payment': return <Payment />; case 'inventory': return <Inventory />; case 'viewMembers': return <ViewMembers />; case 'coaches': return <Coaches />; case 'report': return <Report />; default: return <Dashboard />; } };
    const NavItem = ({ icon: Icon, label, active, onClick }) => (<li onClick={onClick} className={`flex items-center p-3 my-1 rounded-lg cursor-pointer group transition-colors duration-200 ${active ? 'bg-gray-700 text-white shadow-lg' : 'text-gray-400 hover:bg-gray-700 hover:text-white'}`}><Icon className={`h-5 w-5 ${active ? 'text-white' : 'text-gray-400 group-hover:text-white'}`} /><span className="ml-4 font-medium">{label}</span></li>);
    return (<div className="w-full max-w-screen-2xl mx-auto flex bg-white rounded-3xl shadow-2xl min-h-[95vh]"><aside className="bg-slate-800 text-white w-72 p-6 flex-col justify-between rounded-l-3xl hidden lg:flex"><div><div className="flex items-center mb-10"><div className="w-12 h-12 bg-gray-500 rounded-full flex items-center justify-center mr-4 overflow-hidden"><img src={user?.photoURL} alt={user?.role} className="w-full h-full object-cover" /></div><div><h3 className="font-bold text-lg capitalize">{user?.role}</h3><p className="text-xs text-gray-400">{user?.email}</p></div></div><nav><ul>{navItemsList.map(item => <NavItem key={item.id} {...item} active={activePage === item.id} onClick={() => setActivePage(item.id)} />)}</ul></nav></div><div><NavItem icon={LogOut} label="Logout" onClick={logout} /></div></aside><main className="flex-1 p-8 bg-gray-100 rounded-r-3xl overflow-y-auto"><header className="flex justify-between items-center mb-8"><div className="flex items-center"><h1 className="text-3xl font-bold text-slate-800">STAMINA FITNESS</h1></div><div className="flex items-center space-x-6"><button className="font-semibold text-slate-600">Feedback</button><div className="relative"><Bell className="text-slate-600" /><span className="absolute -top-1 -right-1 w-2 h-2 bg-red-500 rounded-full"></span></div></div></header>{renderPage()}</main></div>);
};

// --- MAIN APP COMPONENT ---
export default function App() { return (<ToastProvider><DatabaseProvider><AuthProvider><Main /></AuthProvider></DatabaseProvider></ToastProvider>); }
const Main = () => { const { isAuthenticated, loading } = useAuth(); if(loading) { return <div className="bg-gray-200 min-h-screen flex items-center justify-center"><Loader2 className="h-16 w-16 animate-spin text-indigo-600"/></div> } return isAuthenticated ? (<div className="bg-gray-200 min-h-screen flex items-center justify-center p-4 font-sans"><DashboardApp /></div>) : <ToastProvider><LoginPage /></ToastProvider>; }
